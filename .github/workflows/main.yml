name: CI

# Run on git push, PR, or manually from the Actions tab
on: [push, pull_request, workflow_dispatch]

jobs:
  run_test_x86_64:
    name: ${{ matrix.py-ver-mypy-protobuf }}
    runs-on: ubuntu-latest
    env:
      PY_VER_MYPY: 3.8.11
      PY_VER_UNIT_TESTS_3: 3.8.11
      PY_VER_UNIT_TESTS_2: 2.7.18
    strategy:
      matrix:
        # Running mypy-protobuf itself
        py-ver-mypy-protobuf: [3.8.11]
    steps:
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.17.3'
      - uses: actions/checkout@v2
      - name: Cache pyenv
        uses: actions/cache@v2
        with:
          path: |
              ~/.pyenv
              !~/.pyenv/versions
          key: pyenv-installation-2
      - name: Cache pyenv mypy-protobuf ver
        uses: actions/cache@v2
        with:
          path: ~/.pyenv/versions/${{matrix.py-ver-mypy-protobuf}}
          key: pyenv-${{matrix.py-ver-mypy-protobuf}}-${{hashFiles('setup.py')}}
      - name: Cache pyenv unit tests 3 ver
        uses: actions/cache@v2
        with:
          path: ~/.pyenv/versions/${{env.PY_VER_UNIT_TESTS_3}}
          key: pyenv-${{env.PY_VER_UNIT_TESTS_3}}-${{hashFiles('setup.py')}}
      - name: Cache pyenv unit tests 2 ver
        uses: actions/cache@v2
        with:
          path: ~/.pyenv/versions/${{env.PY_VER_UNIT_TESTS_2}}
          key: pyenv-${{env.PY_VER_UNIT_TESTS_2}}-${{hashFiles('setup.py')}}
      - name: Cache pyenv mypy ver
        uses: actions/cache@v2
        with:
          path: ~/.pyenv/versions/${{env.PY_VER_MYPY}}
          key: pyenv-${{env.PY_VER_MYPY}}-${{hashFiles('setup.py')}}
      - name: Install pyenv
        run: |
          if [ ! -e ~/.pyenv/bin/pyenv ]; then
            rm -rf ~/.pyenv
            curl https://pyenv.run | bash
          fi
          export PATH="$HOME/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv init --path)"
          eval "$(pyenv virtualenv-init -)"
          for PY in ${{matrix.py-ver-mypy-protobuf}} ${{env.PY_VER_MYPY}} ${{env.PY_VER_UNIT_TESTS_3}} ${{env.PY_VER_UNIT_TESTS_2}}; do
            if [ ! -e ~/.pyenv/versions/$PY ]; then
              pyenv install --skip-existing $PY
              pyenv shell $PY
              python -m pip install virtualenv
            fi
          done
      - name: Run Tests (./run_test.sh)
        env:
          PY_VER_MYPY_PROTOBUF: ${{matrix.py-ver-mypy-protobuf}}
          VALIDATE: 1
        run: |
          export PATH="$HOME/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          eval "$(pyenv init --path)"
          eval "$(pyenv virtualenv-init -)"
          ./run_test.sh



          
  armv64_job:
      name: Build and Test for arm64
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - name: Set up QEMU
          id: qemu
          uses: docker/setup-qemu-action@v1
        - name: Install and Run tests
          run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
              arm64v8/ubuntu:20.04 \
              bash -exc 'apt-get update && apt install -y python3 make build-essential libssl-dev zlib1g-dev vim wget curl git git-core gcc llvm libncurses5-dev libffi-dev liblzma-dev libbz2-dev libreadline-dev libsqlite3-dev libncursesw5-dev python-openssl xz-utils dos2unix && \
              ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && export DEBIAN_FRONTEND=noninteractive && apt-get install -y tzdata && dpkg-reconfigure --frontend noninteractive tzdata && \
              ls && \
              ls /usr/bin && \
              pwd && \
              python3 --version && \
              echo ============installing dependencies=================================== && \
              git clone https://github.com/pyenv/pyenv.git $HOME/.pyenv && \
              ls && \
              echo =========================== contents of HOME ========================== && \
              ls -a $HOME/ && \
              file $HOME/.bashrc && \
              file $HOME/.pyenv && \
              echo =========================== contents of usr/bin ========================== && \
              ls /usr/bin && \
              pwd && \
              python3 --version && \
              touch $HOME/.bashrc && \
              export PYENV_ROOT="$HOME/.pyenv" >> $HOME/.bashrc && \
              export PATH="$PYENV_ROOT/bin:$PATH" >> $HOME/.bashrc && \
              if command -v pyenv 1>/dev/null 2>&1; then eval "$(pyenv init -)" ; fi >> $HOME/.bashrc && \
              source $HOME/.bashrc && \
              pyenv install -l && \
              pyenv install 3.8.11 && \
              pyenv versions && \
              pyenv global 3.8.11 && \
              git clone https://github.com/yyuu/pyenv-virtualenv.git   $HOME/.pyenv/plugins/pyenv-virtualenv && \
              source $HOME/.bashrc && \
              pyenv virtualenv 3.8.11 .env && \
              pyenv activate .env && \
              pyenv versions && \
              export PYENV_VIRTUALENV_DISABLE_PROMPT=1 && \
              ./run_test.sh && \
              deactivate'
              
#${{ env.py }} -m pyenv .env && \
#source .env/bin/activate && \
